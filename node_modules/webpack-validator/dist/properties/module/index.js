'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOADERS_QUERY_MESSAGE = exports.CONDITION_MESSAGE = undefined;

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONDITION_MESSAGE = exports.CONDITION_MESSAGE = 'may be a RegExp (tested against absolute path), ' + 'a string containing the absolute path, a function(absPath): bool, ' + 'or an array of one of these combined with “and”.';

var LOADERS_QUERY_MESSAGE = exports.LOADERS_QUERY_MESSAGE = 'You can only pass the \`query\` property when you specify your ' + 'loader with the singular \`loader\` property';

var conditionSchema = _joi2.default.array().items([_joi2.default.string(), _joi2.default.object().type(RegExp), _joi2.default.func().arity(1)]).single().options({ language: { array: { includesSingle: CONDITION_MESSAGE } } });

var loaderSchema = _joi2.default.object({
  test: conditionSchema.required(),
  exclude: conditionSchema,
  include: conditionSchema,
  loader: _joi2.default.string(),
  query: _joi2.default.object(),
  loaders: _joi2.default.array().items(_joi2.default.string())
}).xor('loaders', 'loader').nand('loaders', 'query').options({ language: { object: { nand: LOADERS_QUERY_MESSAGE } } });

var loadersSchema = _joi2.default.array().items(loaderSchema);

exports.default = _joi2.default.object({
  loaders: loadersSchema.required(),
  preLoaders: loadersSchema,
  postLoaders: loadersSchema,
  noParse: _joi2.default.array(_joi2.default.object().type(RegExp)).single()
});