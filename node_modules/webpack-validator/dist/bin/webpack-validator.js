#!/usr/bin/env node


'use strict';

var fs = require('fs');
var path = require('path');
var program = require('commander');
var log = require('npmlog');
var validate = require('../');
var schema = require('../').schema;
var configFile = void 0;

program.arguments('<configFileName>').option('-q, --quiet', 'Quiet output').action(function (configFileName) {
  configFile = configFileName;
});
program.parse(process.argv);

function errorHandler(err) {
  if (err.isJoi && err.name === 'ValidationError' && err.annotate) {
    log.error(err.annotate());
  } else {
    log.error(err.message);
  }
  process.exit(1);
}

function validateConfig(webpackConfigFile, quiet) {
  if (!quiet) console.log('Reading: ' + webpackConfigFile);
  var config = require(path.join(process.cwd(), webpackConfigFile));
  var validationResult = validate(config, schema, {
    returnValidation: true,
    quiet: quiet
  });
  if (validationResult.error) {
    console.info(validationResult.error.annotate());
    process.exit(1);
  } else {
    if (!quiet) console.info(webpackConfigFile + ' is valid');
    process.exit(0);
  }
}

if (!configFile) {
  var error = new Error(['No configuration file given', 'Usage: webpack-validator-cli <configFileName>'].join('\n'));
  error.type = 'EUSAGE';
  errorHandler(error);
}

fs.stat(configFile, function (err, stats) {
  if (err) {
    err.message = 'Could not find file "' + configFile + '"'; // eslint-disable-line no-param-reassign
    errorHandler(err);
  } else {
    if (stats.isFile()) {
      validateConfig(configFile, program.quiet);
    } else {
      var _error = new Error('Could not find file "' + configFile + '"');
      _error.type = 'EISDIR';
      errorHandler(_error);
    }
  }
});